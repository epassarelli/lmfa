Necesito que en ROL de Experto en PHP/Laravel, me pases el cÃ³digo completo para generar un CRUD en mi proyecto de Laravel.
El CRUD es para la entidad Interpretes, te paso la migracion y el model para que realices el controller, vistas, validaciones y todo lo que se requiera para crear el CRUD.
Para le campo biografia que es un Text me gustaria un campo de texto enriquecido.

Migration:
class CreateInterpretesTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('interpretes', function (Blueprint $table) {
            $table->id();

            $table->string('interprete');
            $table->string('slug');
            $table->string('foto');
            $table->text('biografia');

            $table->string('telefono');
            $table->string('correo');

            $table->string('instagram');
            $table->string('twitter');
            $table->string('youtube');

            $table->integer('visitas');

            $table->datetime('publicar');
            $table->integer('estado');

            $table->foreignId('user_id')
                ->nullable()
                ->constrained('users')
                ->cascadeOnUpdate()
                ->nullOnDelete();

            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('interpretes');
    }
}

Model: 
class Interprete extends Model
{
    use CommonMethodsTrait;

    use HasFactory;
    protected $fillable = ['interprete', 'slug', 'biografia', 'foto', 'visitas', 'publicar', 'user_id', 'estado'];

    // Retorna una coleccion con interpretes menos el actual
    public static function getInterpretesExcluding($currentInterpreteId)
    {
        // return self::where('id', '!=', $currentInterpreteId)->get();
        return self::where('id', '!=', $currentInterpreteId)
            ->where('estado', 1)
            ->orderBy('interprete', 'asc')
            ->get();
    }

    public function noticias()
    {
        return $this->hasMany(Noticia::class);
        // return $this->belongsToMany(Noticia::class, 'interpretes_noticias');
    }

    public function shows()
    {
        return $this->hasMany(Show::class);
        // return $this->belongsToMany(Show::class, 'interpretes_shows');
    }

    public function discos()
    {
        return $this->hasMany(Album::class);
        // return $this->belongsToMany(Album::class, 'interpretes_albunes');
    }

    public function canciones()
    {
        return $this->hasMany(Cancion::class);
        // return $this->belongsToMany(Cancion::class, 'interpretes_canciones');
    }

    public function users()
    {
        return $this->hasMany(User::class);
        // return $this->belongsToMany(User::class, 'interpretes_users');
    }
}